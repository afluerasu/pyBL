
Quick Start
***********


Step 1:
=======

**Start application by running the startup script:**

% ./runPyBL


Step 2:
=======

**Once you start the environment, the following will be prompted with
defaults from your pyBL.conf file. You can change these settings as
you are prompted at the bottom of the defaults.**

=Diffraction Experiment Parameters=

Session Name:  X11

Engine Name:  you

Author Name: pyBL

Diffractometer/Experiment Geometry sixc

=Process Variable/Angle Relationships=

mu->test:m1

delta->test:m2

gam->test:m3

eta->test:m4

chi->test:m5

phi->test:m6

=Motor Names/Positions=

Dummy:

   energy : 12.39842 keV

   wavelength : 1.0 Angstrom

   mu : 0.0 deg

   delta : 90.0 deg

   gam : 0.0 deg

   eta : 45.0 deg

   chi : 45.0 deg

   phi : 0.0 deg

%Would you like to modify session configuration [y/n]y

%Session Name: trial

%Engine Name:you

%Would you like to modify session configuration [y/n]n

%Would you like to modify Process Variable configuration [y/n]y

mu->test:m1

delta->test:m2

gam->test:m3

eta->test:m4

chi->test:m5

phi->test:m6

mu->test:m1

delta->test:m3

gam->...


Step 3
======

**Set the desired angles.**

%setAngles(['mu','delta','gam','eta','chi','phi'])

**By running position() make sure the angles are set as you expected.
You can move the angles simply by running:**

%position(angle_name=angle_value,....)

**This allows you to see whether assigned angle names are moving the
angles you predicted.**


Step 4
======

**Set up lattice parameters, UB Matrix and two-theta reflection:**

%newub('>>test_<<')

%setlat('cubic',1,1,1,90,90,90)

%c2th([1,0,0])


Step 5
======

**Add reflections and generate UB matrix:**

%position(mu=0,delta=60,gam=0,eta=30,chi=0,phi=0)

%addref([1,0,0])

%addref([0,1,0],[0,60,0,30,0,90],energy())

%ub()


Step 6
======

**Check if the configuration is correct and returning the correct
values you expected.**

%angles_to_hkl((0.,60.,0.,30.,0.,0.))


Step 7
======

**Set up constraints and hardware limits:**

%con('gam',0)

%con('a_eq_b')

%con('mu',0)

%con()

%set_low_limit('delta',0)


Step 8
======

**Convert hkl coordinates to angles.**

%hkl_to_angles(1,0,0,energy())

**You can also see solutions using allhkl():**

%allhkl([1,0,0])


Step 9
======

**Generate trajectory. This will allows you to declare a path(by
changing motor position orientation).**

%genTraj(hCoordinates=[1,1.3],kCoordinates=0,lCoordinates=0,resolution
=0.1)

**Check individual trajectory. checkTrajectory() is used throughout
scan routines in order to assure generated trajectories are correct.**


Step 10
=======

**Run a scan in hkl space for the given limits and reciprocal space
calculations**

%scan_hkl(h=[1,1.2],k=[0.1,0.3],l=0,stepsize=0.1)
