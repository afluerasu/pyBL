
Manual
******


Commands
========

Python Beamline Scripting environment for NSLS2 beamlines provides
users with routines handling hardware control, experimental logging,
reciprocal space calculation and several other services that deals
with image processing. The following commands are provided as of
version 0.1.0 and are subject to change. Please use an up-to-date
version of this code and documentation if you would like to benefit
from full-capability.

commands.addref(*args)

   addref -- add reflection interactively addref [h k l] {'tag'} --
   add reflection with current position and energy addref [h k l]
   (p1,p2...pN) energy {'tag'} -- add arbitrary reflection

commands.allhkl(hkl, wavelength=None)

   allhkl [h k l] -- print all hkl solutions ignoring limits

commands.angles_to_hkl(angleTuple, energy=None)

   Converts a set of diffractometer angles to an hkl position Usage:
   ((h, k, l), paramDict)=angles_to_hkl(self, (a1, a2,aN),
   energy=None)

commands.c2th(hkl, en=None)

   c2th [h k l]  -- calculate two-theta angle for reflection

commands.checkub()

   checkub -- show calculated and entered hkl values for reflections.

commands.con(*args)

   con -- list available constraints and values con <name> {val} --
   constrains and optionally sets one constraint con <name> {val}
   <name> {val} <name> {val} -- clears and then fully constrains

   Select three constraints using 'con' and 'uncon'. Choose up to one
   from each of the sample and detector columns and up to three from
   the sample column.

   Not all constraint combinations are currently available:

      1 x samp:              all 80 of 80 2 x samp and 1 x ref:  chi &
      phi

         mu & eta chi=90 & mu=0 (2.5 of 6)

      2 x samp and 1 x det:  0 of 6 3 x samp:              eta, chi &
      phi (1 of 4)

   See also 'uncon'

commands.delref(num)

   delref num -- deletes a reflection (numbered from 1)

commands.editref(num)

   editref num -- interactively edit a reflection.

commands.getLogLevel()

   Returns the threshold of Python Logging Instances. User can set the
   level of detail for "diffractometer" log files:

      Level       When it is used DEBUG       Detailed information,
      typically of interest only when diagnosing problems. INFO
      Confirmation that things are working as expected. WARNING     An
      indication that something unexpected happened, or indicative of
      some problem in the near future (e.g. disk space low). The
      software is still working as expected. ERROR       Due to a more
      serious problem, the software has not been able to perform some
      function. CRITICAL    A serious error, indicating that the
      program itself may be unable to continue running.

commands.get_low_limit(name)

   Usage:
      get_low_limit(name=Angle)

   Returns the low limit for a specific angle.

commands.hkl_to_angles(h, k, l, energy=None)

   Convert a given hkl vector to a set of diffractometer angles

commands.listub()

   listub -- list the ub calculations available to load.

commands.loadub(name_or_num)

   loadub {'name'>>|<<num} -- load an existing ub calculation

commands.move(angle, position)

   Move a single motor to a user designated location. For multiple
   motors, one can  write their own custom macros by utilizing
   position() or move(). Position is suggested if user defined motion
   involves several motors moving  in a coherent fashion.Unlike
   mainstream beamline hardware motion control and XRay diffraction
   experiment software, this tool allows user to move  multiple motors
   simultaneously. Users can also use this python scripting
   environment in order to control other hardware alongside motors
   also simultaneously. Usage:

      move(angle,position)

commands.newub(name=None)

   newub {'name'} -- start a new ub calculation name

commands.position(**args)

   Users can define their own angle-value pair dictionaries.The motors
   will be moved to these positions  if the defined positions are
   within motors' hardware limits Usage:

      position() for return values of position
      position(angle1=value1,angle2=value2) to move motors

commands.saveubas(name)

   saveubas 'name' -- save the ub calculation with a new name

commands.setLogLevel(level)

   Sets the threshold of Python Logging Instances. User can set the
   level of detail for diffractometer log files:

      Level       When it is used DEBUG       Detailed information,
      typically of interest only when diagnosing problems. INFO
      Confirmation that things are working as expected. WARNING     An
      indication that something unexpected happened, or indicative of
      some problem in the near future (e.g. disk space low). The
      software is still working as expected. ERROR       Due to a more
      serious problem, the software has not been able to perform some
      function. CRITICAL    A serious error, indicating that the
      program itself may be unable to continue running.

commands.setName(name)

   setName--sets the diffractometer configuration name.

commands.setlat(name=None, *args)

   setlat  -- interactively enter lattice parameters (Angstroms and
   Deg) setlat name a -- assumes cubic setlat name a b -- assumes
   tetragonal setlat name a b c -- assumes ortho setlat name a b c
   gamma -- assumes mon/hex with gam not equal to 90 setlat name a b c
   alpha beta gamma -- arbitrary

commands.setu(U=None)

   setu {((,,),(,,),(,,))} -- manually set u matrix

commands.setub(UB=None)

   setub {((,,),(,,),(,,))} -- manually set ub matrix

commands.showref()

   showref -- shows full reflection list

commands.swapref(num1=None, num2=None)

   swapref -- swaps first two reflections used for calulating U matrix
   swapref num1 num2 -- swaps two reflections (numbered from 1)

commands.trialub()

   trialub -- (re)calculate u matrix from ref1 only (check carefully).

commands.ub()

   ub -- show the complete state of the ub calculation

commands.wavelength(value=None)

   wavelength(value=None)-- sets the wavelength for the reciprocal
   space calculations

commands.where()

   where()--Returns the all the motor positions and current hkl
   coordinates


Developer Manual
****************

Diffractometer and hardware used for XRAY Diffraction experiments are
treated as objects with multiple attributes by this code.As a result,
diffractometer objects are customizable for each beamline/user.
DiffCalc (by Rob Walton-Diamond Light Source) is the heart of the
reciprocal space calculation engine and in order to perform reciprocal
space calculations, this software creates custom diffractometer and
hardware-dependent instances and maps the attributes of these
instances (axis names, motor positions, limits, etc...) to DiffCalc
objects. In other words, this code uses DiffCalc API without wrapping
DiffCalc code, leaving DiffCalc standalone for future updates.

**As of v0.1:**

As Diffcalc documentation also states, DiffCalc core calculation code
works with a six-circle geometry.It supports four-circle modes, where
two circles are fixed @ zero, five-circle modes, where one circle is
fixed and the last is used to keep surface normal in the horizontal
lab plane,and six-circle modes where the surface normal is kept
parallel to the omega (theta) axis.For each of these there are five
variants: the angle of the incoming or outgoing beam to the crystal
surface can be fixed the incoming and outgoing angles can be made
equal, phi can be fixed,or the azimuthal angle about the momentum-
transfer vector can be fixed.The azimuthal variants still need some
testing and likely development.
DiffCalc does not directly move motors. It is only a reciprocal space
calculator. Hardware motion is provided through this software(via
EPICS services). Angles stand for the axes(circles) of the
diffractometer.EPICS Process Variables(PVs) are assigned to angle
instances.These PVs are provided by EPICS IOC and EPICS asyn
driver.For more details on this, please check EPICS motor record
documentation(http://www.aps.anl.gov/bcda/synApps/motor/). Flexible
nature of EPICS applications allows users to add custom hardware on
their own,making this software a multi-hardware-platform application.

class class Diffractometer.Angle(name, value, geometry, positiveLimit, negativeLimit, author)

   Each angle of the diffractometer is treated as an independent
   instance. This allows better controlled diffractometer circles.
   Each angle has an EPICS process variable that is required for motor
   motion.Angles also have attributes such as value and
   positive/negative limits.These are used as ways to capture
   unexpected events such as moving a circle out of limits.

class class Diffractometer.Diffractometer(name, geometry, engine, tag, author)

   Constructor-Name, tag, author, angle list(axes names) are chosen by
   the user based on their preferences or standards. Diffractometer
   expects to get either FourCircle or SixCircle options as geometry.
   There are 3 engines supported by this software: 'you', 'vlieg',
   'willmott'. The latest and fastest of the three is 'you', however,
   users can choose one engine over another based on their
   application. Hardware attribute is a placeholder for DiffCalc
   Hardware Adapter. As of this version, this software utilizes
   DummyHardwareAdapter. However, in the future versions, this will be
   replaced with a custom HardwareAdapter instance as we will
   determine preferences and standards in NSLS2 XRay Diffraction
   Beamline

   basicSetup(hardwareAdapter, **params)

      Sets up a basic diffractometer with default values. These values
      can be changed by using native functions such as
      someAngle.setName(),someAngle.setpositive () can be used. If
      this is not the preference as this requires setting up too many
      parameters, diffcalc.config.advancedSetup() provides a
      cleaner/more organized way to set up a custom diffractometer by
      utilizing dictionaries. self.engine=engine    self.tag='Basic
      diffractometer configuration' self.author='default'
      self.defaultAngleParam={'value':0,

         'geometry':SixCircle(), 'positiveLimit':180,
         'negativeLimit':-180}

      parameterList={'angles','geometry'}

   createAngles(angle, Geometry)

      Creates Angle instances for a hardware.Each angle instance is
      created and manipulated separately. The user has complete
      control of each circle of a diffractometer.

   getAngleNames()

      Returns a list of Angle instances that includes all the angles
      associated with a given diffractometer angleList is updated
      after every operation that changes motor positions.

   getAngleValues()

      Returns a list of Angle values. These values are read from the
      EPICS motor record and always refer to actual motor position
      readings.

   getAuthor()

      Returns the author/owner of the Diffractometer configuration.

   getDCInstance()

      Returns the DiffCalc instance that a a specific Diffractometer
      is mapped onto. By using this DiffCalc object, developers can
      write custom applications that deal directly with DiffCalc
      objects. This is useful once a custom diffcalc functionality is
      written inside diffcalc, as it is done under commands.py,
      developer can create a function under this API that is directly
      linked to the custom diffcalc function.

   getEngine()

      Returns DiffCalc calculation engine used in order to notify the
      user. This makes it possible to write applications that use
      different calculation engines based on different
      papers(you,vlieg,willmott) and compare recirporcal space/motor
      positions. **Return Type:** String

   getGeometry()

      Returns diffractometer geometry in string format. The reason
      behind this is to simplify geometry selection for the user
      through configuration file. For a custom reciprocal space
      calculation or geometry, a developer should create custom
      geometries inside DiffCalc(see DiffCalc Developer Manual) and
      call these geometries via Diffractometer.setGeometry().
      Developer also needs to assure that proper number of
      motors(Angle instances) are created via Config.py. **Return
      Type:** String

   getHardware()

      Returns the hardware used for reciprocal space calculations.
      This is strictly for diffcalc, however,Angle names and Angle
      values are completely in coherence with userAPI.

   getName()

      Returns the diffractometer configuration name. This can be used
      to identify a specific configuration of a diffractometer as this
      attribute is accessed directly through the configuration file
      **Return Type:** String

   getRefFlag()

      Returns the reflection flag. **Return Type:** Boolean

   getTag()

      Returns Diffractometer Tag. This should not be confused with
      Olog Tags. This can be identical to Olog tag, however, this tag
      does not directly map onto Olog tag of pyOlog.conf.

   getUBFlag()

      Returns the ub flag.

      **Return Type:** Boolean

   getangleList()

      Returns a list of Angle Instances that refer to the circles of
      the diffractometer. These objects also map onto DiffCalc
      "scannables".

   setAnglesforHardware(angleList, Geometry)

      Creates Angle instances for a user defined diffractometer. These
      angles are going to be used fo setting up
         reciprocal space calculations as well as hardware motion
         control.  Each angle instance is assigned to a motor, which
         provides a coherent structure making it simple to generate
         custom geometries for beamline scientists. This also makes it
         possible to construct a hardware independent configuration
         that is easy to maintain. Default values are:

      sixAngleList=['mu','delta','nu','eta','chi','phi']
      fourAngleList=['mu','theta','nu','delta']
      geometryList=['SixCircle','FourCircle','sixcircle','fourcircle']

         If a developer would like to add a custom geometry or angle
         list, this portion of the code must be modified.  In case of
         a user, users can initialize their angle lists by using
         passing a list of angles to setAngles() method through the
         API.

   setDCInstance()

      To be modified as the hardware adapter is initiated

   setEngine(engine)

      Sets the engine used in diffraction experiment. This engine is
      used in reciprocal space calculations through diffcalc.
      Supported engines: YOU, WILLMOTT,VLIEG

   setGeometry(geometry)

      Sets a diffractometer's geometry. This geometry is used for both
      motor control and and reciprocal space calculations.

   setHardwareAdapter(hardwareAdapter)

      Sets up a hardware adapter for DiffCalc calculations. Available
      adapters:

         DummyHardwareAdapter(diffractometerAngleNames)

         HardwareAdapter(diffractometerAngleNames,
            defaultCuts={},  energyScannableMultiplierToGetKeV=1)

   setRefFlag()

      RefFlag prohibits users from attempting to perform operations in
      reciprocal space before they add any sort of reflection

   setTag(tag)

      Parameters:
         **tag** -- Refers to experimental catalog and diffractometer
         configuration tag.Used for search,save, restore purposes in
         relational database

   setUBFlag()

      UBFlag is used a a way to avoid users from attempting to perform
      an operation that requires lattice and/or UB matrix setup (i.e.
      go_to_hkl() or hkl_to_angles() before setlat() and ub()
