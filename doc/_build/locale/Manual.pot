# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, Arman Arkilic
# This file is distributed under the same license as the pyBL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pyBL 0.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-13 21:00\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../Manual.rst:2
# cfd59ca0cdc244859503538e767af81d
msgid "Manual"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands:2
# d5bcb4da74d2478f8bb6c0a32a5b82d7
msgid "Commands"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands:3
# d290bc0e34734f9a94c38c581fbc8335
msgid "Python Beamline Scripting environment for NSLS2 beamlines provides users with routines handling hardware control, experimental logging, reciprocal space calculation and several other services that deals with image processing. The following commands are provided as of version 0.1.0 and are subject to change. Please use an up-to-date version of this code and documentation if you would like to benefit from full-capability."
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.addref:1
# 29272c60f2f94191a65b20e92c76f775
msgid "addref -- add reflection interactively addref [h k l] {'tag'} -- add reflection with current position and energy addref [h k l] (p1,p2...pN) energy {'tag'} -- add arbitrary reflection"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.allhkl:1
# dbf7519f0aae472b991ac8f6a41742ef
msgid "allhkl [h k l] -- print all hkl solutions ignoring limits"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.angles_to_hkl:1
# aab63b5b5380477d864b13341eca4cfe
msgid "Converts a set of diffractometer angles to an hkl position Usage: ((h, k, l), paramDict)=angles_to_hkl(self, (a1, a2,aN), energy=None)"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.c2th:1
# ab6662a6b2bb423598d804201382c4b2
msgid "c2th [h k l]  -- calculate two-theta angle for reflection"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.checkub:1
# b8ee739a795d486eadceaf75663530ea
msgid "checkub -- show calculated and entered hkl values for reflections."
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.con:1
# a3ef2201108f4d35b78c5d9d8c5e1c3b
msgid "con -- list available constraints and values con <name> {val} -- constrains and optionally sets one constraint con <name> {val} <name> {val} <name> {val} -- clears and then fully constrains"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.con:5
# 0b32cdcaf2d44ff4adec1565a1459af1
msgid "Select three constraints using 'con' and 'uncon'. Choose up to one from each of the sample and detector columns and up to three from the sample column."
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.con:9
# e79df008d1db411490a5c1449884d040
msgid "Not all constraint combinations are currently available:"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.con:11
# 5efbf840dac14ba58bb4aab003afbe66
msgid "1 x samp:              all 80 of 80 2 x samp and 1 x ref:  chi & phi"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.con:13
# 4dc180dfccdf48a8b9d07349fd5441c9
msgid "mu & eta chi=90 & mu=0 (2.5 of 6)"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.con:15
# 7a04c69333a74b24b2073e201cc83310
msgid "2 x samp and 1 x det:  0 of 6 3 x samp:              eta, chi & phi (1 of 4)"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.con:18
# c05cb1a7a0ed421796027aef861eaa94
msgid "See also 'uncon'"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.delref:1
# adce93c10c71413d833a9a1289ffa407
msgid "delref num -- deletes a reflection (numbered from 1)"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.editref:1
# 62e355534df4420da66502d0e7a15b56
msgid "editref num -- interactively edit a reflection."
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.getLogLevel:1
# e0119863f1c34df991f2c5398c7a029b
msgid "Returns the threshold of Python Logging Instances. User can set the level of detail for \"diffractometer\" log files:"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.getLogLevel:3
#: ../../../pyBL/commands.py:docstring of commands.setLogLevel:3
# 4552b24460b949e99fd3159bfee6d909
# 8f111f03cf0e42d78cfec0260ecd69a5
msgid "Level       When it is used DEBUG       Detailed information, typically of interest only when diagnosing problems. INFO        Confirmation that things are working as expected. WARNING     An indication that something unexpected happened, or indicative of some problem in the near future (e.g. disk space low). The software is still working as expected. ERROR       Due to a more serious problem, the software has not been able to perform some function. CRITICAL    A serious error, indicating that the program itself may be unable to continue running."
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.get_low_limit:2
# e251f2b90a904e02a5b4efa7350546db
msgid "get_low_limit(name=Angle)"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.get_low_limit:3
# 45feb3d2b1be4adea2526c53703570d3
msgid "Returns the low limit for a specific angle."
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.hkl_to_angles:1
# 4f8a24b26cf64b3b83de919501e28928
msgid "Convert a given hkl vector to a set of diffractometer angles"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.listub:1
# 10cf748cc73349fb8867467b5e6cacba
msgid "listub -- list the ub calculations available to load."
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.loadub:1
# c780efecad1642a4a5e8140f1c3f8243
msgid "loadub {'name'|num} -- load an existing ub calculation"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.move:1
# e57f29c35342414ba67960828e9067be
msgid "Move a single motor to a user designated location. For multiple motors, one can  write their own custom macros by utilizing position() or move(). Position is suggested if user defined motion involves several motors moving  in a coherent fashion.Unlike mainstream beamline hardware motion control and XRay diffraction experiment software, this tool allows user to move  multiple motors simulatenously. Users can also use this python scripting environment in order to control other hardware alongside motors also simulatenously.  Usage:"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.move:9
# d6e22df1ec0b4adcb94fc10f3640a5d3
msgid "move(angle,position)"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.newub:1
# b690bf0bdd3a46df8891b4321f1323df
msgid "newub {'name'} -- start a new ub calculation name"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.position:1
# e9a3f6292b4945fd95f1ea92f24acb71
msgid "Users can define their own angle-value pair dictionaries.The motors will be moved to these positions  if the defined positions are within motors' hardware limits Usage:"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.position:4
# 57d5c38ae5a1485f92e2a9a828f633ce
msgid "position({'angle#1':value1,'angle2':value2,...})"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.saveubas:1
# 58284a5b7e924f04a783b07089b77beb
msgid "saveubas 'name' -- save the ub calculation with a new name"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.setLogLevel:1
# 57c3222eda89475d917447106b8c7718
msgid "Sets the threshold of Python Logging Instances. User can set the level of detail for diffractometer log files:"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.setName:1
# cf813541489449959de2b2236e532b16
msgid "setName--sets the diffractometer configuration name."
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.setlat:1
# 50b82dc702a84be190d8060bc0fa26fd
msgid "setlat  -- interactively enter lattice parameters (Angstroms and Deg) setlat name a -- assumes cubic setlat name a b -- assumes tetragonal setlat name a b c -- assumes ortho setlat name a b c gamma -- assumes mon/hex with gam not equal to 90 setlat name a b c alpha beta gamma -- arbitrary"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.setu:1
# 6007e418323c425da01368d1fa158adb
msgid "setu {((,,),(,,),(,,))} -- manually set u matrix"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.setub:1
# cb72d8de64ad4945b43467c7479b095e
msgid "setub {((,,),(,,),(,,))} -- manually set ub matrix"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.showref:1
# 443e91c457f24983a250acee3d3a8d6c
msgid "showref -- shows full reflection list"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.swapref:1
# 71d38cf1a5004979b6dd72129ea8822f
msgid "swapref -- swaps first two reflections used for calulating U matrix swapref num1 num2 -- swaps two reflections (numbered from 1)"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.trialub:1
# 60887d2f981e4b0589c78ae85b4ef51a
msgid "trialub -- (re)calculate u matrix from ref1 only (check carefully)."
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.ub:1
# c653368a57864424a2f667f8045cfacf
msgid "ub -- show the complete state of the ub calculation"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.wavelength:1
# 7bd910254e9045dba8d21107175c9004
msgid "wavelength(value=None)-- sets the wavelength for the reciprocal space calculations"
msgstr ""

#: ../../../pyBL/commands.py:docstring of commands.where:1
# 7beb1c7699824aab8f62b157548b7523
msgid "where()--Returns the all the motor positions and current hkl coordinates"
msgstr ""

#: ../../Manual.rst:9
# 5fbc9c62ae6b4391adaf8fade533ac1c
msgid "Developer Manual"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer:1
# 8056053d1ef94141a87c7d058fe59685
msgid "Diffractometer and hardware used for XRAY Diffraction experiments are treated as objects with multiple attributes by this code.As a result, diffractometer objects are customizable for each beamline/user. DiffCalc (by Rob Walton-Diamond Light Source) is the heart of the reciprocal space calculation engine and in order to perform reciprocal space calculations, this software creates custom diffractometer and hardware-dependent instances and maps the attributes of these instances (axis names, motor positions, limits, etc...) to DiffCalc objects. In other words, this code uses DiffCalc API without wrapping DiffCalc code, leaving DiffCalc standalone for future updates."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer:3
# 2f2986b914f148fb9f51b04b749d47a8
msgid "**As of v0.1:**"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer:5
# 735f060bfb724734ba14f52f342f714d
msgid "As Diffcalc documentation also states, DiffCalc core calculation code works with a six-circle geometry.It supports four-circle modes, where two circles are fixed @ zero, five-circle modes, where one circle is fixed and the last is used to keep surface normal in the horizontal lab plane,and six-circle modes where the surface normal is kept parallel to the omega (theta) axis.For each of these there are five variants: the angle of the incoming or outgoing beam to the crystal surface can be fixed the incoming and outgoing angles can be made equal, phi can be fixed,or the azimuthal angle about the momentum-transfer vector can be fixed.The azimuthal variants still need some testing and likely development.                                        DiffCalc does not directly move motors. It is only a reciprocal space calculator. Hardware motion is provided through this software(via EPICS services). Angles stand for the axes(circles) of the diffractometer.EPICS Process Variables(PVs) are assigned to angle instances.These PVs are provided by EPICS IOC and EPICS asyn driver.For more details on this, please check EPICS motor record documentation(http://www.aps.anl.gov/bcda/synApps/motor/). Flexible nature of EPICS applications allows users to add custom hardware on their own,making this software a multi-hardware-platform application."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer:1
# 13a6018311744001977150e95625c187
msgid "Constructor-Name, tag, author, angle list(axes names) are chosen by the user based on their preferences or standards. Diffractometer expects to get either FourCircle or SixCircle options as geometry. There are 3 engines supported by this software: 'you', 'vlieg', 'willmott'. The latest and fastest of the three is 'you', however, users can choose one engine over another based on their application. Hardware attribute is a placeholder for DiffCalc Hardware Adapter. As of this version, this software utilizes DummyHardwareAdapter. However, in the future versions, this will be replaced with a custom HardwareAdapter instance as we will determine preferences and standards in NSLS2 XRay Diffraction Beamline"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.basicSetup:1
# e24ce83e2ee446db82169e807523b96f
msgid "Sets up a basic diffractometer with default values. These values can be changed by using native functions such as someAngle.setName(),someAngle.setpositive () can be used. If this is not the preference as this requires setting up too many parameters, diffcalc.config.advancedSetup() provides a cleaner/more organized way to set up a custom diffractometer by utilizing dictionaries. self.engine=engine    self.tag='Basic diffractometer configuration' self.author='default' self.defaultAngleParam={'value':0,"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.basicSetup:8
# 95a5c169253a4bfebd6cb457431c890b
msgid "'geometry':SixCircle(), 'positiveLimit':180, 'negativeLimit':-180}"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.basicSetup:11
# 407b2262769241808b5681f87f9c9dcc
msgid "parameterList={'angles','geometry'}"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.createAngles:1
# fa0289646f27476ebc4605e67680e77b
msgid "Creates Angle instances for a hardware.Each angle instance is created and manipulated separately. The user has complete control of each circle of a diffractometer."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getAngleNames:1
# ae41b7aa8ae84feaa4452748c6a61ccf
msgid "Returns a list of Angle instances that includes all the angles associated with a given diffractometer angleList is updated after every operation that changes motor positions."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getAngleValues:1
# bed87a4b55a94162b16dd013488015c2
msgid "Returns a list of Angle values. These values are read from the EPICS motor record and always refer to actual motor position readings."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getAuthor:1
# 73073aed0d41482485cf4ff3815848c7
msgid "Returns the author of the Diffractometer configuration."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getClient:1
# a829656d56c04b1586d0257ad7d8c315
msgid "Returns an Olog Client object that can be used to access several attributes that may be used for searching entries, creating new logbook, tag, property and/or present user with information regarding logs."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getDCInstance:1
# a94af360081d408d8e78d5d72714a6e7
msgid "Returns the DiffCalc instance that a a specific Diffractometer is mapped onto. By using this DiffCalc object, developers can write custom applications that deal directly with DiffCalc objects. This is useful once a custom diffcalc functionality is written inside diffcalc, as it is done under commands.py, developer can create a function under this API that is directly linked to the custom diffcalc function."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getEngine:1
# 19019a58c52247699a4d3a749908b48f
msgid "Returns DiffCalc calculation engine used in order to notify the user. This makes it possible to write applications that use different calculation engines based on different papers(you,vlieg,willmott) and compare recirporcal space/motor positions."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getGeometry:1
# 0992ca6efd5e4612ab1b6581ec3a3d92
msgid "Returns diffractometer geometry in string format. The reason behind this is to simplify geometry selection for the user through configuration file. For a custom reciprocal space calculation or geometry, a developer should create custom geometries inside DiffCalc(see DiffCalc Developer Manual) and call these geometries via Diffractometer.setGeometry(). Developer also needs to assure that proper number of motors(Angle instances) are created via Config.py."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getHardware:1
# 139b9797436a4dadba334c601a6465b7
msgid "Returns the hardware used for reciprocal space calculations. This is strictly for diffcalc, however,Angle names and Angle values are completely in coherence with userAPI."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getName:1
# 30f52c8130b34fd4a335b316d56bb21f
msgid "Returns the diffractometer configuration name. This can be used to identify a specific configuration of a diffractometer as this attribute is accessed directly through the configuration file"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getTag:1
# c76708f80a924dd7bec7058b793af01d
msgid "Returns Diffractometer Tag. This should not be confused with Olog Tags. This can be identical to Olog tag, however, this tag does not directly map onto Olog tag of pyOlog.conf."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getangleList:1
# a991ce1f74334ff9b4d868e83ec593a9
msgid "Returns a list of Angle Instances that refer to the circles of the diffractometer. These objects also map onto DiffCalc \"scannables\"."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setAnglesforHardware:1
# 74c308f15f66483880e0bc2a622cfbb8
msgid "Creates Angle instances for a user defined diffractometer. These angles are going to be used fo setting up  reciprocal space calculations as well as hardware motion control.  Each angle instance is assigned to a motor, which provides a coherent structure making it simple to generate  custom geometries for beamline scientists. This also makes it possible to construct a hardware independent configuration that is easy to maintain."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setClient:1
# 3865c8284260433e9e74c50b4687df05
msgid "Sets up an olog client for the given diffractometer configuration. Developers/users can modify this olog client.However, one must be really careful not to lose existing log entries as log entries created have a client field and permissions to these entries that strictly depend on this client."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setDCInstance:1
# 32648b68d22a475081e565bdf7233015
msgid "To be modified as the hardware adapter is initiated"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setEngine:1
# 209ae5ac6a7348ee80f0e33b3d3f42d9
msgid "Sets the engine used in diffraction experiment. This engine is used in reciprocal space calculations through diffcalc.  Supported engines: YOU, WILLMOTT,VLIEG"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setGeometry:1
# b992fa0e466b4d6caf1be2f7497f6dd5
msgid "Sets a diffractometer's geometry. This geometry is used for both motor control and and reciprocal space calculations."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setHardwareAdapter:1
# 99da174876af48ed9a1d294f4b105258
msgid "Sets up a hardware adapter for DiffCalc calculations. Available adapters:"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setHardwareAdapter:3
# efbf2d0c63754476be9c0232f5ab96f4
msgid "DummyHardwareAdapter(diffractometerAngleNames)"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setHardwareAdapter:6
# 86bb17b77f4f4efd919b58f43e125831
msgid "defaultCuts={},  energyScannableMultiplierToGetKeV=1)"
msgstr ""

