# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, Arman Arkilic
# This file is distributed under the same license as the pyBL package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pyBL 0.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-09-20 17:57\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../Developer Manual.rst:2
# 7ba74308712440c99766116d4325972c
msgid "Developer Manual"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer:1
# 85b9c8f121f74f89ad8565d1705056f5
msgid "Diffractometer and hardware used for XRAY Diffraction experiments are treated as objects with multiple attributes by this code.As a result, diffractometer objects are customizable for each beamline/user. DiffCalc (by Rob Walton-Diamond Light Source) is the heart of the reciprocal space calculation engine and in order to perform reciprocal space calculations, this software creates custom diffractometer and hardware-dependent instances and maps the attributes of these instances (axis names, motor positions, limits, etc...) to DiffCalc objects. In other words, this code uses DiffCalc API without wrapping DiffCalc code, leaving DiffCalc standalone for future updates."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer:3
# 9588e5e4ff7d4e649f7483ed0c00bd5d
msgid "**As of v0.1:**"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer:5
# b33826e44f1b445a9c21a5137b5a46d3
msgid "As Diffcalc documentation also states, DiffCalc core calculation code works with a six-circle geometry.It supports four-circle modes, where two circles are fixed @ zero, five-circle modes, where one circle is fixed and the last is used to keep surface normal in the horizontal lab plane,and six-circle modes where the surface normal is kept parallel to the omega (theta) axis.For each of these there are five variants: the angle of the incoming or outgoing beam to the crystal surface can be fixed the incoming and outgoing angles can be made equal, phi can be fixed,or the azimuthal angle about the momentum-transfer vector can be fixed.The azimuthal variants still need some testing and likely development.                                        DiffCalc does not directly move motors. It is only a reciprocal space calculator. Hardware motion is provided through this software(via EPICS services). Angles stand for the axes(circles) of the diffractometer.EPICS Process Variables(PVs) are assigned to angle instances.These PVs are provided by EPICS IOC and EPICS asyn driver.For more details on this, please check EPICS motor record documentation(http://www.aps.anl.gov/bcda/synApps/motor/). Flexible nature of EPICS applications allows users to add custom hardware on their own,making this software a multi-hardware-platform application."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer:1
# 8f17911b4e3a4945949d88aa8882ca53
msgid "Constructor-Name, tag, author, angle list(axes names) are chosen by the user based on their preferences or standards. Diffractometer expects to get either FourCircle or SixCircle options as geometry. There are 3 engines supported by this software: 'you', 'vlieg', 'willmott'. The latest and fastest of the three is 'you', however, users can choose one engine over another based on their application. Hardware attribute is a placeholder for DiffCalc Hardware Adapter. As of this version, this software utilizes DummyHardwareAdapter. However, in the future versions, this will be replaced with a custom HardwareAdapter instance as we will determine preferences and standards in NSLS2 XRay Diffraction Beamline"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.basicSetup:1
# 6a162ff9acfd4e10b61b9f3192d334da
msgid "Sets up a basic diffractometer with default values. These values can be changed by using native functions such as someAngle.setName(),someAngle.setpositive () can be used. If this is not the preference as this requires setting up too many parameters, diffcalc.config.advancedSetup() provides a cleaner/more organized way to set up a custom diffractometer by utilizing dictionaries. self.engine=engine    self.tag='Basic diffractometer configuration' self.author='default' self.defaultAngleParam={'value':0,"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.basicSetup:8
# 9a9870e03f91428aa9a0fc8caefcfd03
msgid "'geometry':SixCircle(), 'positiveLimit':180, 'negativeLimit':-180}"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.basicSetup:11
# 94f86261d21048cdb8710a59dd769ab5
msgid "parameterList={'angles','geometry'}"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.createAngles:1
# 4f88bc40cb2e41a88dacf3e21e29187e
msgid "Creates Angle instances for a hardware.Each angle instance is created and manipulated separately. The user has complete control of each circle of a diffractometer."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getAngleNames:1
# 5d232678c5eb4b889ad3ca0830341de2
msgid "Returns a list of Angle instances that includes all the angles associated with a given diffractometer angleList is updated after every operation that changes motor positions."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getAngleValues:1
# 269a61c3cb9d4e72a3385c1aa2b1c038
msgid "Returns a list of Angle values. These values are read from the EPICS motor record and always refer to actual motor position readings."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getAuthor:1
# e5b0854a6b9e44d095d7264ed537c888
msgid "Returns the author of the Diffractometer configuration."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getClient:1
# 67ac46d3babc4b9d9529a3f4cd0c57a9
msgid "Returns an Olog Client object that can be used to access several attributes that may be used for searching entries, creating new logbook, tag, property and/or present user with information regarding logs."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getDCInstance:1
# 5177effbb56b4ae888cd32f366c8d379
msgid "Returns the DiffCalc instance that a a specific Diffractometer is mapped onto. By using this DiffCalc object, developers can write custom applications that deal directly with DiffCalc objects. This is useful once a custom diffcalc functionality is written inside diffcalc, as it is done under commands.py, developer can create a function under this API that is directly linked to the custom diffcalc function."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getEngine:1
# 9102233a91ef4fefbba5a31b7b47c552
msgid "Returns DiffCalc calculation engine used in order to notify the user. This makes it possible to write applications that use different calculation engines based on different papers(you,vlieg,willmott) and compare recirporcal space/motor positions."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getGeometry:1
# 825964caf0604a4babf2aedce88b59d0
msgid "Returns diffractometer geometry in string format. The reason behind this is to simplify geometry selection for the user through configuration file. For a custom reciprocal space calculation or geometry, a developer should create custom geometries inside DiffCalc(see DiffCalc Developer Manual) and call these geometries via Diffractometer.setGeometry(). Developer also needs to assure that proper number of motors(Angle instances) are created via Config.py."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getHardware:1
# 14cc278b12ab4fdd9a4d93b5b53ffa9c
msgid "Returns the hardware used for reciprocal space calculations. This is strictly for diffcalc, however,Angle names and Angle values are completely in coherence with userAPI."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getName:1
# f4f05bd8126642af9dd6a9c142e0f1cc
msgid "Returns the diffractometer configuration name. This can be used to identify a specific configuration of a diffractometer as this attribute is accessed directly through the configuration file"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getTag:1
# de843f7c0dad4f45a896f5a760dfa1a9
msgid "Returns Diffractometer Tag. This should not be confused with Olog Tags. This can be identical to Olog tag, however, this tag does not directly map onto Olog tag of pyOlog.conf."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.getangleList:1
# 709b66e01fad4a45a5d54096730b3fcb
msgid "Returns a list of Angle Instances that refer to the circles of the diffractometer. These objects also map onto DiffCalc \"scannables\"."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setAnglesforHardware:1
# 74735680f703459c9d5de0bd5b60657a
msgid "Creates Angle instances for a user defined diffractometer. These angles are going to be used fo setting up  reciprocal space calculations as well as hardware motion control.  Each angle instance is assigned to a motor, which provides a coherent structure making it simple to generate  custom geometries for beamline scientists. This also makes it possible to construct a hardware independent configuration that is easy to maintain."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setClient:1
# a188a6371cb841c29d197f692b55feab
msgid "Sets up an olog client for the given diffractometer configuration. Developers/users can modify this olog client.However, one must be really careful not to lose existing log entries as log entries created have a client field and permissions to these entries that strictly depend on this client."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setDCInstance:1
# 2f4c9ed1647a4c9f85dc50f901685ce2
msgid "To be modified as the hardware adapter is initiated"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setEngine:1
# 3be5c4895247401c8897d3d51716cce8
msgid "Sets the engine used in diffraction experiment. This engine is used in reciprocal space calculations through diffcalc.  Supported engines: YOU, WILLMOTT,VLIEG"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setGeometry:1
# 7ea56fa2e54548d484cec8b20a044928
msgid "Sets a diffractometer's geometry. This geometry is used for both motor control and and reciprocal space calculations."
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setHardwareAdapter:1
# 9e1f3e0b41dd4f60849b653bdc1f8314
msgid "Sets up a hardware adapter for DiffCalc calculations. Available adapters:"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setHardwareAdapter:3
# b32a372ddd50448b9155d561573cbea3
msgid "DummyHardwareAdapter(diffractometerAngleNames)"
msgstr ""

#: ../../../pyBL/Diffractometer.py:docstring of Diffractometer.Diffractometer.setHardwareAdapter:6
# dee7868ee579483d97de9c41b7704293
msgid "defaultCuts={},  energyScannableMultiplierToGetKeV=1)"
msgstr ""

